{"version":3,"sources":["src/view/CanvasView.ts","src/sprites/Ball.ts","src/sprites/Paddle.ts","src/Collision.ts","src/setup.ts","src/sprites/Brick.ts","src/helpers.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.417fe899.js","sourceRoot":"..","sourcesContent":["// Types\r\nimport { Brick } from '../sprites/Brick';\r\nimport { Paddle } from '../sprites/Paddle';\r\nimport { Ball } from '../sprites/Ball';\r\n\r\nexport class CanvasView {\r\n  canvas: HTMLCanvasElement;\r\n  private context: CanvasRenderingContext2D | null;\r\n  private scoreDisplay: HTMLObjectElement | null;\r\n  private start: HTMLObjectElement | null;\r\n  private info: HTMLObjectElement | null;\r\n\r\n  constructor (canvasName: string) {\r\n    this.canvas = document.querySelector(canvasName) as HTMLCanvasElement;\r\n    this.context = this.canvas.getContext('2d');\r\n    this.scoreDisplay = document.querySelector('#score');\r\n    this.start = document.querySelector('#start');\r\n    this.info = document.querySelector('#info');\r\n  }\r\n\r\n  clear (): void {\r\n    this.context?.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  initStartButton (startFunction: (view: CanvasView) => void): void {\r\n    this.start?.addEventListener('click', () => startFunction(this));\r\n  }\r\n\r\n  drawScore (score: number): void {\r\n    if ( this.scoreDisplay ) this.scoreDisplay.innerHTML = score.toString();\r\n  }\r\n\r\n  drawInfo (text: string): void {\r\n    if ( this.info ) this.info.innerHTML = text;\r\n  }\r\n\r\n  drawSprite (brick: Brick | Paddle | Ball): void {\r\n    if ( !brick ) return;\r\n\r\n    this.context?.drawImage(\r\n      brick.image,\r\n      brick.pos.x,\r\n      brick.pos.y,\r\n      brick.width,\r\n      brick.height\r\n    );\r\n  }\r\n\r\n  drawBricks (bricks: Brick[]): void {\r\n    bricks.forEach(brick => this.drawSprite(brick));\r\n  }\r\n}\r\n","import { Vector } from '../types';\r\n\r\nexport class Ball {\r\n  private speed: Vector;\r\n  private ballImage: HTMLImageElement = new Image();\r\n  \r\n  constructor (\r\n    speed: number,\r\n    private ballSize: number,\r\n    private position: Vector,\r\n    image: string\r\n  ) {\r\n    this.ballSize = ballSize;\r\n    this.position = position;\r\n    this.speed = {\r\n      x: speed,\r\n      y: -speed\r\n    };\r\n    this.ballImage.src = image;\r\n  }\r\n\r\n  // Getters\r\n  get width (): number {\r\n    return this.ballSize;\r\n  }\r\n\r\n  get height (): number {\r\n    return this.ballSize;\r\n  }\r\n\r\n  get pos (): Vector {\r\n    return this.position;\r\n  }\r\n\r\n  get image (): HTMLImageElement {\r\n    return this.ballImage;\r\n  }\r\n\r\n  // Methods\r\n  changeYDirection (): void {\r\n    this.speed.y = -this.speed.y;\r\n  }\r\n\r\n  changeXDirection (): void {\r\n    this.speed.x = -this.speed.x;\r\n  }\r\n\r\n  moveBall (): void {\r\n    this.pos.x += this.speed.x;\r\n    this.pos.y += this.speed.y;\r\n  }\r\n}","import { Vector } from '../types';\r\n\r\nexport class Paddle {\r\n  private paddleImage: HTMLImageElement = new Image();\r\n  private moveLeft: boolean;\r\n  private moveRight: boolean;\r\n\r\n  constructor (\r\n    private speed: number,\r\n    private paddleWidth: number,\r\n    private paddleHeight: number,\r\n    private position: Vector,\r\n    image: string\r\n  ) {\r\n    this.speed = speed;\r\n    this.paddleWidth = paddleWidth;\r\n    this.paddleHeight = paddleHeight;\r\n    this.position = position;\r\n    this.moveLeft = false;\r\n    this.moveRight = false;\r\n    this.paddleImage.src = image;\r\n\r\n    // Event Listeners\r\n    document.addEventListener('keydown', this.handleKeyDown);\r\n    document.addEventListener('keyup', this.handleKeyUp);\r\n  }\r\n\r\n  // Getters\r\n  get width (): number {\r\n    return this.paddleWidth;\r\n  }\r\n\r\n  get height (): number {\r\n    return this.paddleHeight;\r\n  }\r\n\r\n  get pos (): Vector {\r\n    return this.position;\r\n  }\r\n\r\n  get image (): HTMLImageElement {\r\n    return this.paddleImage;\r\n  }\r\n\r\n  get isMovingLeft (): boolean {\r\n    return this.moveLeft;\r\n  }\r\n\r\n  get isMovingRight (): boolean {\r\n    return this.moveRight;\r\n  }\r\n\r\n  movePaddle (): void {\r\n    if ( this.moveLeft ) this.pos.x -= this.speed;\r\n    if ( this.moveRight ) this.pos.x += this.speed;\r\n  }\r\n\r\n  handleKeyUp = (e: KeyboardEvent): void => {\r\n    if ( e.code === 'ArrowLeft' || e.key === 'ArrowLeft' ) this.moveLeft = false;\r\n    if ( e.code === 'ArrowRight' || e.key === 'ArrowRight' ) this.moveRight = false;\r\n  }\r\n\r\n  handleKeyDown = (e: KeyboardEvent): void => {\r\n    if ( e.code === 'ArrowLeft' || e.key === 'ArrowLeft' ) this.moveLeft = true;\r\n    if ( e.code === 'ArrowRight' || e.key === 'ArrowRight' ) this.moveRight = true;\r\n  }\r\n}\r\n","// Types\r\nimport { Brick } from './sprites/Brick';\r\nimport { Paddle } from './sprites/Paddle';\r\nimport { Ball } from './sprites/Ball';\r\nimport { CanvasView } from './sprites/CanvasView';\r\n\r\nexport class Collision {\r\n\r\n  isCollidingBrick (ball: Ball, brick: Brick): boolean {\r\n    if (\r\n      ball.pos.x < brick.pos.x + brick.width &&\r\n      ball.pos.x + ball.width > brick.pos.x &&\r\n      ball.pos.y < brick.pos.y + brick.height &&\r\n      ball.pos.y + ball.height > brick.pos.y\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Check ball collision with bricks\r\n  isCollidingBricks (ball: Ball, bricks: Brick[]): boolean {\r\n    let colliding = false;\r\n\r\n    bricks.forEach((brick, i) => {\r\n      if ( this.isCollidingBrick(ball, brick) ) {\r\n        ball.changeYDirection();\r\n\r\n        if ( brick.energy === 1 ) {\r\n          bricks.splice(i, 1);\r\n        } else {\r\n          brick.energy -= 1;\r\n        }\r\n        colliding = true;\r\n      }\r\n\r\n    })\r\n    return colliding;\r\n  }\r\n\r\n  checkBallCollision (ball: Ball, paddle: Paddle, view: CanvasView): void {\r\n    // Check ball collision with paddle\r\n    if (\r\n      ball.pos.x + ball.width > paddle.pos.x &&\r\n      ball.pos.x < paddle.pos.x + paddle.width &&\r\n      ball.pos.y + ball.height === paddle.pos.y\r\n    ) {\r\n      ball.changeYDirection();\r\n    }\r\n\r\n    // Check ball collision with wall\r\n    // Ball movement X constraints\r\n    if ( ball.pos.x > view.canvas.width - ball.width || ball.pos.x < 0 ) {\r\n      ball.changeXDirection()\r\n    }\r\n    // Ball movement Y constraints\r\n    if ( ball.pos.y < 0 ) {\r\n      ball.changeYDirection()\r\n    }\r\n  }\r\n}\r\n","import RED_BRICK_IMAGE from \"./images/brick-red.png\";\r\nimport BLUE_BRICK_IMAGE from \"./images/brick-blue.png\";\r\nimport GREEN_BRICK_IMAGE from \"./images/brick-green.png\";\r\nimport YELLOW_BRICK_IMAGE from \"./images/brick-yellow.png\";\r\nimport PURPLE_BRICK_IMAGE from \"./images/brick-purple.png\";\r\n\r\nconst canvas: HTMLCanvasElement | null = document.querySelector(\"#playField\");\r\n\r\nexport const STAGE_PADDING = 10;\r\nexport const STAGE_ROWS = 20;\r\nexport const STAGE_COLS = 10;\r\nexport const BRICK_PADDING = 5;\r\nexport const BRICK_WIDTH = canvas\r\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\r\n  : 100;\r\nexport const BRICK_HEIGHT = canvas\r\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\r\n  : 30;\r\nexport const PADDLE_WIDTH = 150;\r\nexport const PADDLE_HEIGHT = 25;\r\nexport const PADDLE_STARTX = 450;\r\nexport const PADDLE_SPEED = 10;\r\nexport const BALL_SPEED = 5;\r\nexport const BALL_SIZE = 20;\r\nexport const BALL_STARTX = 500;\r\nexport const BALL_STARTY = 400;\r\n\r\nexport const BRICK_IMAGES: { [key: number]: string } = {\r\n  1: RED_BRICK_IMAGE,\r\n  2: GREEN_BRICK_IMAGE,\r\n  3: YELLOW_BRICK_IMAGE,\r\n  4: BLUE_BRICK_IMAGE,\r\n  5: PURPLE_BRICK_IMAGE\r\n};\r\n\r\nexport const BRICK_ENERGY: { [key: number]: number } = {\r\n  1: 1,\r\n  2: 1,\r\n  3: 2,\r\n  4: 2,\r\n  5: 3\r\n};\r\n\r\nexport const LEVEL = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\r\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\r\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\r\n  0, 0, 4, 4, 4, 4, 4, 4, 0, 0,\r\n  0, 0, 5, 5, 0, 0, 5, 5, 0, 0\r\n];\r\n","import { Vector } from '../types';\r\n\r\nexport class Brick {\r\n  private brickImage: HTMLImageElement = new Image();\r\n\r\n  constructor (\r\n    private brickWidth: number,\r\n    private brickHeight: number,\r\n    private position: Vector,\r\n    private brickEnergy: number,\r\n    image: string\r\n  ) {\r\n    this.brickWidth = brickWidth;\r\n    this.brickHeight = brickHeight;\r\n    this.position = position;\r\n    this.brickEnergy = brickEnergy;\r\n    this.brickImage.src = image;\r\n  }\r\n\r\n  // Getters\r\n  get width (): number {\r\n    return this.brickWidth;\r\n  }\r\n\r\n  get height (): number {\r\n    return this.brickHeight;\r\n  }\r\n\r\n  get pos (): Vector {\r\n    return this.position;\r\n  }\r\n\r\n  get image (): HTMLImageElement {\r\n    return this.brickImage;\r\n  }\r\n\r\n  get energy (): number {\r\n    return this.brickEnergy;\r\n  }\r\n\r\n  // Setters\r\n  set energy (energy: number) {\r\n    this.brickEnergy = energy;\r\n  }\r\n}\r\n","import { Brick } from './sprites/Brick';\r\n\r\nimport {\r\n  BRICK_IMAGES,\r\n  LEVEL,\r\n  STAGE_COLS,\r\n  STAGE_PADDING,\r\n  BRICK_WIDTH,\r\n  BRICK_HEIGHT,\r\n  BRICK_PADDING,\r\n  BRICK_ENERGY\r\n} from './setup';\r\n\r\nexport function createBricks (): Brick[] {\r\n  return LEVEL.reduce((ack, element, i) => {\r\n    const row = Math.floor((i + 1) / STAGE_COLS);\r\n    const col = i % STAGE_COLS;\r\n\r\n    const x = STAGE_PADDING + col * (BRICK_WIDTH + BRICK_PADDING);\r\n    const y = STAGE_PADDING + row * (BRICK_HEIGHT + BRICK_PADDING);\r\n\r\n    if ( element === 0 ) return ack;\r\n\r\n    return [\r\n      ...ack,\r\n      new Brick(\r\n        BRICK_WIDTH,\r\n        BRICK_HEIGHT,\r\n        { x, y },\r\n        BRICK_ENERGY[element],\r\n        BRICK_IMAGES[element]\r\n      )\r\n    ]\r\n  }, [] as Brick[])\r\n}","import { CanvasView } from './view/CanvasView';\r\nimport { Ball } from './sprites/Ball';\r\nimport { Brick } from './sprites/Brick';\r\nimport { Paddle } from './sprites/Paddle';\r\nimport { Collision } from './Collision';\r\n// images\r\nimport PADDLE_IMAGE from './images/paddle.png';\r\nimport BALL_IMAGE from './images/ball.png';\r\n// level and colors\r\nimport {\r\n  PADDLE_SPEED,\r\n  PADDLE_WIDTH,\r\n  PADDLE_HEIGHT,\r\n  PADDLE_STARTX,\r\n  BALL_SPEED,\r\n  BALL_SIZE,\r\n  BALL_STARTX,\r\n  BALL_STARTY\r\n} from './setup';\r\n// Helpers\r\nimport { createBricks } from './helpers';\r\n\r\nlet gameOver = false;\r\nlet score = 0;\r\n\r\nfunction setGameOver (view: CanvasView) {\r\n  view.drawInfo('Game Over!');\r\n  gameOver = false;\r\n}\r\n\r\nfunction setGameWin (view: CanvasView) {\r\n  view.drawInfo('Game Won!');\r\n  gameOver = false;\r\n}\r\n\r\nfunction gameLoop (\r\n  view: CanvasView,\r\n  bricks: Brick[],\r\n  paddle: Paddle,\r\n  ball: Ball,\r\n  collision: Collision\r\n) {\r\n  view.clear();\r\n  view.drawBricks(bricks);\r\n  view.drawSprite(paddle);\r\n  view.drawSprite(ball);\r\n\r\n  // Move Ball\r\n  ball.moveBall();\r\n\r\n  // Move paddle and check so it won't exit the playfield\r\n  if (\r\n    ( paddle.isMovingLeft && paddle.pos.x > 0 ) ||\r\n    ( paddle.isMovingRight && paddle.pos.x < view.canvas.width - paddle.width )\r\n  ) {\r\n    paddle.movePaddle()\r\n  }\r\n\r\n  collision.checkBallCollision(ball, paddle, view);\r\n  const collidingBrick = collision.isCollidingBricks(ball, bricks);\r\n\r\n  if ( collidingBrick ) {\r\n    score += 1;\r\n    view.drawScore(score);\r\n  }\r\n\r\n  // Game over when ball leaves playfield\r\n  if ( ball.pos.y > view.canvas.height ) gameOver = true;\r\n  // If game won, set gameOver and display win\r\n  if ( bricks.length === 0 ) return setGameWin(view);\r\n  // Return if gameover and don't run the requestAnimationFrame\r\n  if ( gameOver ) return setGameOver(view);\r\n\r\n  requestAnimationFrame(() => gameLoop(view, bricks, paddle, ball, collision));\r\n}\r\n\r\nfunction startGame (view: CanvasView) {\r\n  // Reset display\r\n  score = 0;\r\n  view.drawInfo('');\r\n  view.drawScore(0);\r\n  // Create a collision instance\r\n  const collision = new Collision();\r\n  // Create all bricks\r\n  const bricks = createBricks();\r\n  // Create Ball\r\n  const ball = new Ball(\r\n    BALL_SPEED,\r\n    BALL_SIZE,\r\n    {\r\n      x: BALL_STARTX,\r\n      y: BALL_STARTY\r\n    },\r\n    BALL_IMAGE\r\n  )\r\n  // Create a Paddle\r\n  const paddle = new Paddle(\r\n    PADDLE_SPEED,\r\n    PADDLE_WIDTH,\r\n    PADDLE_HEIGHT,\r\n    { \r\n      x: PADDLE_STARTX,\r\n      y: view.canvas.height - PADDLE_HEIGHT - 5\r\n    },\r\n    PADDLE_IMAGE\r\n  )\r\n\r\n  gameLoop(view, bricks, paddle, ball, collision);\r\n}\r\n\r\n// Create a new view\r\nconst view = new CanvasView('#playField');\r\nview.initStartButton(startGame);"]}